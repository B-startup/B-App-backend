generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid()) // UUID primary key
  name              String
  email             String    @unique
  password          String
  otpCode           String? // nullable, for OTP verification
  otpCodeExpiresAt  DateTime? // nullable, for OTP expiration
  isEmailVerified   Boolean   @default(false)
  isCompleteProfile Boolean   @default(false)
  isPhoneVerified   Boolean   @default(false)
  description       String?
  country           String?
  city              String?
  birthdate         DateTime?
  phone             String? // phone as string to include + and leading zeros
  profilePicture    String? // optional, nullable
  webSite           String?
  nbConnects        Int       @default(0)
  nbFollowers       Int       @default(0)
  nbFollowing       Int       @default(0)
  timeSpent         Int       @default(0) // store time in seconds or milliseconds
  nbVisits          Int       @default(0)
  nbProjects        Int       @default(0)
  nbInvestments     Int       @default(0)
  CIN               String?
  passport          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relation
  projects             Project[]
  TeamUsers            TeamUsers[]
  Offer                Offer[]
  Like                 Like[]
  Comment              Comment[]
  View                 View[]
  Video                Video[]
  SentDiscussions      Discussion[] @relation("SentDiscussions")
  ReceivedDiscussions  Discussion[] @relation("ReceivedDiscussions")
  Message              Message[]
  Connect              Connect[]
  Follow               Follow[]
  Blocker              Block[] @relation("Blocker")
  Blocked              Block[] @relation("Blocked")
  Attempt_log          Attempt_log[]
  vistorPofile         vistorPofile[]
  vistorProject        vistorProject[]
  Interests            Interests[]
  Experience_Education Experience_Education[]
  SocialMedia          SocialMedia[]
  Notification         Notification[]
  Post                 Post[]
  PostShared           PostShared[]

  @@map("users")
}

// ========================
// ==== PROJECT SECTION ====
// ========================
enum Status {
  DRAFT
  PUBLIC
  PRIVATE
}

enum ProjectStage {
  PRE_SEED
  SEED
  SERIE_A
  SERIE_B
}

model Project {
  Id                  String       @id @default(uuid())
  creatorId           String
  title               String
  logoImage           String
  description         String
  problem             String
  solution            String
  projectLocation     String
  TeamSize            Int
  idTeam              String
  customersNumber     Int
  financialGoal       Float
  monthlyRevenue      Float
  minPercentage       Int
  maxPercentage       Int
  percentageUnitPrice Float
  sectorId            String
  status              Status       @default(DRAFT)
  createdAt           DateTime     @default(now())
  webSite             String
  runway              DateTime
  marketPlan          String
  businessPlan        String
  success_probability Float
  projectStage        ProjectStage
  net_profit          Float // as percentage
  nbLikes             Int          @default(0)
  nbComments          Int          @default(0)
  nbViews             Int          @default(0)
  nbConnects          Int          @default(0)
  updatedAt           DateTime     @updatedAt
  verifiedProject     Boolean      @default(false)

  // Relation
  creator       User            @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  File          File[]
  UseOfFunds    UseOfFunds[]
  Partenerships Partenerships[]
  ProjectTags   ProjectTags[]
  Team          Team?           @relation(fields: [teamId], references: [id])
  teamId        String?
  Sector        Sector          @relation(fields: [sectorId], references: [id])
  Offer         Offer[]
  Video         Video[]
  Like          Like[]
  Comment       Comment[]
  View          View[]
  Connect       Connect[]
  Follow        Follow[]
  vistorProject vistorProject[]

  @@map("projects")
}

// ========================
// ==== Files SECTION ====
// ========================
model File {
  id        String   @id @default(uuid())
  projectId String
  fileName  String
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@map("files")
}

// ================================
// ==== Use Of Funds SECTION ======
// ================================
model UseOfFunds {
  id            String   @id @default(uuid())
  projectId     String
  title         String
  description   String
  usePercentage Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@map("use_of_funds")
}

model Partenerships {
  id        String   @id @default(uuid())
  projectId String
  name      String
  webSite   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)

  @@map("partnerships")
}

// ================================
// ======= Tag SECTION ============
// ================================
model Tag {
  id          String        @id @default(uuid())
  name        String        @unique
  discription String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // Relation
  ProjectTags ProjectTags[]

  @@map("tags")
}

model ProjectTags {
  id        String   @id @default(uuid())
  projectId String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([projectId])
  @@index([tagId])

  @@map("project_tags")
}

// ================================
// ======= Teams SECTION ==========
// ================================
model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation
  projects  Project[] // relation inverse avec Project
  TeamUsers TeamUsers[]

  @@map("teams")
}

model TeamUsers {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([teamId])
  @@index([userId])

  @@map("team_users")
}

// ================================
// ======= Sector SECTION =========
// ================================
model Sector {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation
  projects  Project[]
  Interests Interests[]

  @@map("sectors")
}

// ================================
// ======= Offer SECTION ==========
// ================================
enum StatusOffer {
  DRAFT
  ACCEPTED
  REJECTED
  PENDING
}

model Offer {
  id               String      @id @default(uuid())
  projectId        String
  userId           String
  amount           Float
  equity           Float
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  responseAt       DateTime? // nullable, for the response from the project owner
  status           StatusOffer @default(DRAFT)
  OfferDescription String?

  // Relation
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([projectId])
  @@index([userId])

  @@map("offers")
}

model Video {
  id          String   @id @default(uuid())
  idUser      String
  projectId   String
  videoUrl    String
  nbComments  Int      @default(0)
  nbLikes     Int      @default(0)
  nbViews     Int      @default(0)
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([projectId])
  @@index([userId])
  userId  String?

  @@map("videos")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  @@index([projectId])

  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  @@index([projectId])

  @@map("comments")
}

model View {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  @@index([projectId])

  @@map("views")
}

enum DiscussionType {
  PRIVATE
  PROJECT
}

model Discussion {
  id         String         @id @default(uuid())
  senderId   String
  receiverId String
  type       DiscussionType
  projectId  String? // Nullable: only used for PROJECT type
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  sender   User @relation("SentDiscussions", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiver User @relation("ReceivedDiscussions", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([senderId])
  @@index([receiverId])

  messages Message[]
  User     User?     @relation(fields: [userId], references: [id])
  userId   String?

  @@map("discussions")
}

model Message {
  id           String   @id @default(uuid())
  discussionId String
  senderId     String
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender     User       @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([discussionId])
  @@index([senderId])

  @@map("messages")
}

model Connect {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  @@index([projectId])

  @@map("connects")
}

model Follow {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  @@index([projectId])

  @@map("follows")
}

model Block {
  id            String   @id @default(uuid())
  userId        String
  blockedUserId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation
  user        User @relation("Blocker", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blockedUser User @relation("Blocked", fields: [blockedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  @@index([blockedUserId])

  @@map("blocks")
}

model Attempt_log {
  id        String   @id @default(uuid())
  userId    String
  otpCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])

  @@map("attempt_logs")
}

model vistorPofile {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])

  @@map("visitor_profiles")
}

model vistorProject {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project Project @relation(fields: [projectId], references: [Id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  @@index([projectId])

  @@map("visitor_projects")
}

model Interests {
  id        String   @id @default(uuid())
  userId    String
  sectorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relation
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sector    Sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  @@index([sectorId])

  @@unique([userId, sectorId]) // Ensure a user can only have one interest per sector
  @@map("interests")
}

enum TypeOfExperience {
  EXPERIENCE
  EDUCATION
}

model Experience_Education {
  id              String           @id @default(uuid())
  userId          String
  title           String
  organization    String
  degree          String? // Nullable, for education
  filedOfStudy    String? // Nullable, for education
  location        String?
  website         String?
  description     String?
  startDate       DateTime
  endDate         DateTime?
  typeofExprience TypeOfExperience // "experience" or "education"
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])

  @@map("experience_education")
}

enum SocialMediaPlatform {
  LINKEDIN
  TWITTER
  FACEBOOK
  INSTAGRAM
  GITHUB
  OTHER
}

model SocialMedia {
  id        String   @id @default(uuid())
  userId    String
  platform  String // e.g., "LinkedIn", "Twitter", etc.
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])

  @@map("social_media")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String // e.g., "like", "comment", "follow", etc.
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])

  @@map("notifications")
}

enum PostCategory {
  GENERAL
  PROJECT_UPDATE
  INVESTMENT_OPPORTUNITY
  TEAM_ANNOUNCEMENT
  EVENT
  OTHER
}

model Post {
  id           String   @id @default(uuid())
  userId       String
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  nbLikes      Int      @default(0)
  nbComments   Int      @default(0)
  nbShares     Int      @default(0)
  nbViews      Int      @default(0)
  isPublic     Boolean  @default(true) // Whether the post is public or private
  mlPrediction String? // Machine learning prediction for content categorization

  // Relation
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([userId])
  PostMedia  PostMedia[]
  PostShared PostShared[]

  @@map("posts")
}

model PostMedia {
  id        String   @id @default(uuid())
  postId    String
  mediaUrl  String
  mediaType String // e.g., "image", "video", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([postId])

  @@map("post_media")
}

model PostShared {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@index([postId])
  @@index([userId])

  @@map("post_shared")
}
